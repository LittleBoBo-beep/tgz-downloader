#!/usr/bin/env node
const {program} = require('commander');
const packageJson = require('../package.json');
const os = require('node:os');
require('colors');
const commands = require('../lib/commands');
const cpuCount = os.cpus().length;

// 执行时间开始时间
const start = Date.now();
process.on('unhandledRejection', error => {
	console.log(`[${'unhandledRejection'.red}]: ${error.message}`, error);
})
process.on('beforeExit', () => {
	console.log(`completed in ${Date.now() - start}ms`.green);
});

program.version(packageJson.version);


program
.command('package-lock <uri>')
.description('download tarballs based on a package-lock.json')
.option('--directory [directory]')
.option('--registry [registry]')
.option('-c, --concurrency <concurrency>', 'number of concurrent download', commands.parseConcurrency, cpuCount)
.action((uri, command) => commands.packageLockCommand(uri, command));

program
.command('package <name> [version]')
.description('download tarballs based on a package and a version')
.option('--directory [directory]')
.option('--registry [registry]')
.option('--devDependencies')
.option('--peerDependencies')
.option('-c, --concurrency <concurrency>', 'number of concurrent download', commands.parseConcurrency, cpuCount)
.action((name, version, command) => commands.packageCommand(name, version, command));

program
.command('package <name> [version-number]')
.description('download tarballs based on a package and number of versions')
.option('--directory [directory]')
.option('--registry [registry]')
.option('--devDependencies')
.option('--peerDependencies')
.option('-c, --concurrency <concurrency>', 'number of concurrent download', commands.parseConcurrency, cpuCount)
.action((name, version, command) => commands.packagesCommand(name, version, command));


// program
//     .command('package-json <uri>')
//     .description('download tarballs based on a package.json')
//     .option('--directory [directory]')
//     .option('--registry [registry]')
//     .option('--devDependencies')
//     .option('--peerDependencies')
//     .option('-c, --concurrency <concurrency>', 'number of concurrent download', commands.parseConcurrency, cpuCount)
//     .action((uri, command) => commands.packageJsonCommand(uri, command));
// 搜索指定的tgz的包
// program
//     .command('search <keyword>')
//     .description('download tarballs based on a npm registry search results')
//     .option('--directory [directory]')
//     .option('--registry [registry]')
//     .option('--devDependencies')
//     .option('--peerDependencies')
//     .action((keyword, command) => commands.searchCommand(keyword, command));

// program
//     .command('generate <name> [version]')
//     .description('generates the download links for a giving package and a version')
//     .option('--outputFile [outputFile]')
//     .option('--registry [registry]')
//     .option('--devDependencies')
//     .option('--peerDependencies')
//     .action((name, version, command) => commands.generateCommand(name, version, command));

// program
//     .command('from-generated <uri>')
//     .description('download tarballs using a generated file created by the generate command')
//     .option('--directory [directory]')
//     .action((uri, command) => commands.fromGeneratedCommand(uri, command));

program.parse(process.argv);
